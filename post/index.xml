<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Sanggiya</title><link>https://srivendare.github.io/post/</link><description>Recent content in Posts on Sanggiya</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://srivendare.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>How to form an effective prompt to ChatGPT</title><link>https://srivendare.github.io/post/prompt_format/</link><pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/prompt_format/</guid><description>Thanks to Andrew Ng&amp;rsquo;s prompt engineering course, I summarize some writing principles for preparing a prompt to ChatBot.
A holistic prompt should inludes3 types of content
The role that you want Chatbot to work as
Task Setting and the direction you want to want on with
a. Specific Task description, which involves procedures
​ b. An Example
Hints, such as output requirement etc Example:</description></item><item><title>Rebuild workflow of my personal blog</title><link>https://srivendare.github.io/post/rebuild_myblog/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/rebuild_myblog/</guid><description/></item><item><title>Organizing Geospatial Data case study on China Eastern Railway</title><link>https://srivendare.github.io/post/china_eastern_railway/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/china_eastern_railway/</guid><description>This article is about some random outcomes for organizing info in a Multi Language Maps.
The Original Map Image is in both Russian and Traditional Chinese:
After OCR through free version web tools:
ID English Name Chinese Name Russian Name Longitude Latitude Country Belonged To Year of Train Station Built 1 Changchun 长春 Чанчунь 125.323544 43.817071 China 1898 2 Shenyang 沈阳 Шэньян 123.</description></item><item><title>Basic Knowledge Graph in Neo4j</title><link>https://srivendare.github.io/post/building-graphs/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/building-graphs/</guid><description>This repo try extract data from json raw data and build Knowledge graph in Neo4j
Raw Data Source:
https://github.com/liuhuanyong/QASystemOnMedicalKG/tree/master/data
Codes:
encoding:utf8 import os import re import json import codecs import threading from py2neo import Graph import pandas as pd import numpy as np from tqdm import tqdm ### Get data Info def print_data_info(data_path): triples = [] i = 0 with open(data_path,&amp;#39;r&amp;#39;,encoding=&amp;#39;utf8&amp;#39;) as f: for line in f.</description></item><item><title>Golang Cheatsheet</title><link>https://srivendare.github.io/post/golang_cheatsheet/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/golang_cheatsheet/</guid><description>2022-03-06
Recently I need to maintain colleague&amp;rsquo;s web scrapers in Golang, here are some notes I took during self-learning, I will keep on updating this article
Lorca a tool for connect and communicate with web Serber 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import ( &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; &amp;#34;github.</description></item><item><title>An Async Example for API request</title><link>https://srivendare.github.io/post/async/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/async/</guid><description>To do multiple tasks with async.map asynchronously you have to:
Define a function for what you want to do with each object (your task) Add that function as an event hook in your request Call async.map on a list of all the requests / actions Example:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from requests import async # from grequests import async urls = [ &amp;#39;http://python-requests.</description></item><item><title>Playing yfinance with Pandas</title><link>https://srivendare.github.io/post/play_yfinance/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/play_yfinance/</guid><description>Due to personal issue, I need to track Forex info recently. However, unlike professional trader, I don&amp;rsquo;t need ticker for every minutes, but day by date is to rough. So this project is a simple pandas manuplation about yfinance API in python, the final aim is to build a FastAPI with ['morning', 'day', 'evening'] avg forex data,
Let&amp;rsquo;s start by import dependencies:
1 2 3 4 5 6 # For data manipulation import numpy as np import pandas as pd # To fetch financial data import yfinance as yf Get the data frame in API</description></item><item><title>ML Evaluation Indexes</title><link>https://srivendare.github.io/post/time_series_evaluation/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/time_series_evaluation/</guid><description>Judging criteria of machine learning models is always an important concerns in real life projects. This artical aims to provide some basic info for opting varibles for improving and evaluating machine learning models</description></item><item><title>Time Series Cheatsheet</title><link>https://srivendare.github.io/post/time_series_cheatsheet/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/time_series_cheatsheet/</guid><description>This article aims to provide some pre-fabricated functions for time series analysis. After a dedication in Time Series field for past few months, I found it is good for getting some structual knowledge recorded.
Through extensive projects and refinement, I have crafted a collection of functions that aim to streamline the process of analyzing temporal patterns, identifying trends, and extracting meaningful insights from time series datasets.
In real work, I use these function to deliver fast results, although the basic notion can be easily forget sometimes : )</description></item><item><title>Extracting Knowledge from Unstructual data</title><link>https://srivendare.github.io/post/extracting_info_from_struactual_data_source/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/extracting_info_from_struactual_data_source/</guid><description/></item><item><title>Basic NLP of Entity Extraction</title><link>https://srivendare.github.io/post/entitiy_extraction/</link><pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/entitiy_extraction/</guid><description>In this article, I tried out Cohere&amp;rsquo;s generative models to extract entities from random texts. It involves employing structured generation, wherein I provided multiple examples within the prompt to enhance the model&amp;rsquo;s ability to generate accurate entity extractions.</description></item><item><title>Using Plotly Charts in Flaks</title><link>https://srivendare.github.io/post/diary_1/</link><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/diary_1/</guid><description>This ariticle aims to give an idea about how to use plot.ly in Flask App.
On the route, pass json to HTML
1 2 3 4 # Create a plotly chart object fig = px.bar(industry_report , x=&amp;#39;grade&amp;#39;, y=&amp;#39;num&amp;#39;) # Get json from the chart figJson = json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder) On the page, get json from python and create chart object
1 2 3 4 var graphs = {{ figJson | safe }}; Plotly.</description></item><item><title>Footnote test</title><link>https://srivendare.github.io/post/footnote/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/footnote/</guid><description>Lorem ipsum dolor sit amet1 consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.
Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum2 consequatur animi.
Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.
Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo tempora eum cumque neque voluptatum, odit ipsum consequatur animi.</description></item><item><title>Katex support</title><link>https://srivendare.github.io/post/test-katex/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/test-katex/</guid><description>The following
$$ \int_{a}^{b} x^2 dx $$
Is an integral
$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$
Enable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.
See the online reference of supported TeX functions.
1 Inline math: $\varphi=\dfrac{1+\sqrt5}{2}=1.6180339887… $ Inline math: $ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $
1 2 3 Block math: $$\varphi=1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$ Block math:</description></item><item><title>MathJax support</title><link>https://srivendare.github.io/post/test-mathjax/</link><pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/test-mathjax/</guid><description>The following
$$ \int_{a}^{b} x^2 dx $$
Is an integral
$$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$
Enable MathJax in the config file by setting the mathjax param to true. This will import the necessary MathJax CSS/JS.
1 Inline math: $\varphi=\dfrac{1+\sqrt5}{2}=1.6180339887… $ Inline math: $ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $
1 2 3 Block math: $$\varphi=1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$ Block math:</description></item><item><title>Markdown Syntax Guide</title><link>https://srivendare.github.io/post/markdown-syntax/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/markdown-syntax/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Example Lazy Load Image</title><link>https://srivendare.github.io/post/example-lazy-load-image/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/example-lazy-load-image/</guid><description>Nya nya nyan meow meow mama More napping, more napping all the napping is exhausting stretch out on bed you are a captive audience while sitting on the toilet, pet me slap the dog because cats rule bleghbleghvomit my furball really tie the room together always hungry. Humans,humans, humans oh how much they love us felines we are the center of attention they feed, they clean miaow then turn around and show you my bum.</description></item><item><title>Placeholder Text</title><link>https://srivendare.github.io/post/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/placeholder-text/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p></description></item><item><title>Emoji Support</title><link>https://srivendare.github.io/post/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://srivendare.github.io/post/emoji-support/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item></channel></rss>